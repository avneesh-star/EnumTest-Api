// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using EnumTest.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace EnumTest.Data
{
    public partial class AppDbContext
    {
        private AppDbContextProcedures _procedures;

        public virtual AppDbContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new AppDbContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public AppDbContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<employeeDeleteResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<employeeInsertResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<employeeSelectResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<employeeSelectAllResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<employeeUpdateResult>().HasNoKey().ToView(null);
        }
    }

    public interface IAppDbContextProceduresContract
    {
        Task<int> employeeDeleteAsync(int? id, CancellationToken cancellationToken = default);
        Task<int> employeeInsertAsync(string Name, string Gender, string city, CancellationToken cancellationToken = default);
        Task<List<employeeSelectResult>> employeeSelectAsync(int? id, CancellationToken cancellationToken = default);
        Task<List<employeeSelectAllResult>> employeeSelectAllAsync(CancellationToken cancellationToken = default);
        Task<int> employeeUpdateAsync(int? id, string Name, string Gender, string city, CancellationToken cancellationToken = default);
    }

    public partial class AppDbContextProcedures
    {
        private readonly AppDbContext _context;

        public AppDbContextProcedures(AppDbContext context)
        {
            _context = context;
        }

        public virtual async Task<int> employeeDeleteAsync(int? id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[employeeDelete] @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> employeeInsertAsync(string Name, string Gender, string city, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            //var parameterreturnValue = new SqlParameter
            //{
            //    ParameterName = "returnValue",
            //    Direction = System.Data.ParameterDirection.Output,
            //    SqlDbType = System.Data.SqlDbType.Int,
            //};

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Name",
                    Size = 120,
                    Value = Name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Gender",
                    Size = 100,
                    Value = Gender ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "city",
                    Size = 100,
                    Value = city ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                }
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC  [dbo].[employeeInsert] @Name, @Gender, @city", sqlParameters, cancellationToken);

            //returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<employeeSelectResult>> employeeSelectAsync(int? id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<employeeSelectResult>("EXEC @returnValue = [dbo].[employeeSelect] @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<employeeSelectAllResult>> employeeSelectAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<employeeSelectAllResult>("EXEC @returnValue = [dbo].[employeeSelectAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> employeeUpdateAsync(int? id, string Name, string Gender, string city, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Name",
                    Size = 120,
                    Value = Name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Gender",
                    Size = 100,
                    Value = Gender ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "city",
                    Size = 100,
                    Value = city ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[employeeUpdate] @id, @Name, @Gender, @city", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
